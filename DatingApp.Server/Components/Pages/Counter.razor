@page "/counter"
@using Orleans
@using DatingApp.Server.ViewModels
@inject IClusterClient client

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<div>
    <input type="text" class="form-control" placeholder="Enter your message" bind="@message" />
    <small id="emailHelp" class="form-text text-muted">Type a message to send via Orleans.</small>
</div>

<div>
    <button class="btn btn-primary" onclick="@IncrementCount">Ping Orlean Grain</button>
    <button class="btn btn-primary" onclick="@SendStreamMessage">Send a message via Orleans Stream</button>
</div>

<div>
    @if (result != null)
    {
        <ul>
            @foreach (var (key, value) in result)
            {
                <li> @key  @value</li>
            }
        </ul>
    }
</div>
<br />
<Listener></Listener>
<br />
<div>
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
        Launch Reactive Stuff
    </button>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Name Games</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="exampleInputName">@(vm.CanExecute? @vm.Greeting : "Uknown Dude")</label>
                    <input type="text" class="form-control" id="exampleInputName" placeholder="Enter name" bind-value-oninput="@vm.Name" />
                    <small id="emailHelp" class="form-text text-muted">We'll never share your name with anyone else.</small>
                </div>
                <button type="button" class="@(vm.Name.Length >= 4 ? "btn btn-success":"btn btn-primary")">
                    Characters <span class="badge badge-light">@vm.Name.Length</span>
                </button>
                <button class="btn btn-primary" disabled="@(!vm.CanExecute)" onclick="@(() => vm.Clear.Execute().Subscribe())">Clear</button>

                @if (vm.HasErrors)
                {
                    <ul>
                        @foreach (var error in vm.ValErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@functions {
    int currentCount = 0;
    string message = "";

    List<KeyValuePair<string, dynamic>> result;

    ReactiveFodyViewModel vm;

    protected override Task OnInitAsync()
    {
        vm = new ReactiveFodyViewModel();
        return base.OnInitAsync();
    }

    async Task IncrementCount()
    {
        currentCount++;
        var grain = client.GetGrain<IMyGrain>(0);
        result = await grain.Echo(
            new List<KeyValuePair<string, dynamic>>
            {
                    new KeyValuePair<string, dynamic>("we", 1),
                    new KeyValuePair<string, dynamic>("have", Guid.NewGuid()),
                    new KeyValuePair<string, dynamic>("liftoff", DateTime.UtcNow),
        });
    }
    // Testing to check if Orleans streams are working in Razor Components
    async Task SendStreamMessage()
    {
        var guid = new Guid("0f07450c-b8e7-472c-a275-0059bca40989");
        // Get stream provider
        var streamProvider = client.GetStreamProvider("SMSProvider");
        // Get the reference to a stream
        var stream = streamProvider.GetStream<string>(guid, "Razor");
        // Pushing message into the stream
        await stream.OnNextAsync(message);
        this.message = "";
    }

}
